EEPS$MonthRemoved<-month(EEPS$newRemoveTime)
EEPS$DayRemoved<-day(EEPS$newRemoveTime)
EEPS$HourRemoved<-hour(EEPS$newRemoveTime)
EEPS$MinuteRemoved<-minute(EEPS$newRemoveTime)
View(EEPS)
install.packages("shiny")
library('shiny')
library('plyr')
library('ggplot2')
options(stringsAsFactors=F)
EEPS<-read.csv("C:/temp/output.csv",header=F,na.strings=c("", "NA"))
summary(EEPS)
t<-tail(EEPS)
nrow(EEPS)
colnames(EEPS)<-c("AuthorityNumber", "Territory", "FormType", "DateCreated", "IssuedTo", "Reason", "PlaceTime", "PlaceRTC", "RemoveTime","Limits")
class(EEPS$DateCreated)
#switch from factor to character
EEPS$DateCreated<-as.character(EEPS$DateCreated)
library(lubridate)
#new data created reformat
EEPS$newDateCreated<-ymd_hms(EEPS$DateCreated)
#some dates didn't parse - possible missing data.
EEPS$YearCreated<-year(EEPS$newDateCreated)
EEPS$MonthCreated<-month(EEPS$newDateCreated)
EEPS$DayCreated<-day(EEPS$newDateCreated)
#new place time, reformatted
EEPS$newPlaceTime<-ymd_hms(EEPS$PlaceTime)
#some dates didn't parse - possible missing data.
EEPS$YearPlaced<-year(EEPS$newPlaceTime)
EEPS$MonthPlaced<-month(EEPS$newPlaceTime)
EEPS$DayPlaced<-day(EEPS$newPlaceTime)
EEPS$HourPlaced<-hour(EEPS$newPlaceTime)
EEPS$MinutePlaced<-minute(EEPS$newPlaceTime)
#new remove time, reformatted
EEPS$newRemoveTime<-ymd_hms(EEPS$RemoveTime)
#some dates didn't parse - possible missing data.
EEPS$YearRemoved<-year(EEPS$newRemoveTime)
EEPS$MonthRemoved<-month(EEPS$newRemoveTime)
EEPS$DayRemoved<-day(EEPS$newRemoveTime)
EEPS$HourRemoved<-hour(EEPS$newRemoveTime)
EEPS$MinuteRemoved<-minute(EEPS$newRemoveTime)
library(stringr)
#find CP in the string (may occur several times,
#but just the first two should provide the CP
#information that we need
alltxt<-as.character(EEPS$Limits)
#get the text location of "CP" for all rows
EEPS$CPloc<-str_locate_all(pattern ='CP',alltxt)
EEPS[EEPS$CPloc==""]  <- NA
exists<- function (x) {
if(nrow(x)>=1 & ncol(x)>=2) {
a=x[1,2]+1
}else{
a=NA
}
return(a)
}
start1<-sapply(EEPS$CPloc,function(x) (exists(x)))
CPNum<-substr(alltxt, start1, start1+3)
CPNum1<-gsub('[^0-9]',"",CPNum)
EEPS$StartCP<-CPNum1
#some CPs are showing up with an extra two numbers, reduce to just two
trunc4 <- function (x){
if(nchar(x)>3){
return(substring(x,1,2))
}else{
return(x)
}
}
EEPS$StartCP<-as.numeric(sapply(EEPS$StartCP,function(x) (trunc4(x))))
#find CP End
exists2<- function (x) {
if(nrow(x)>=2 & ncol(x)>=2) {
a=x[2,2]+1
}else{
a=NA
}
return(a)
}
start2<-sapply(EEPS$CPloc,function(x) (exists2(x)))
CPNum.2<-substr(alltxt, start2, start2+3)
CPNum1.2<-gsub('[^0-9]',"",CPNum.2)
EEPS$EndCP<-CPNum1.2
EEPS$EndCP<-as.numeric(sapply(EEPS$EndCP,function(x) (trunc4(x))))
checkCPs<-EEPS[,c("Limits","StartCP","EndCP")]
summary(EEPS)
checkCPs
View(checkCPs)
View(EEPS)
#dates resource:
#http://cran.r-project.org/web/packages/lubridate/vignettes/lubridate.html
options(stringsAsFactors=F)
EEPS<-read.csv("C:/temp/output.csv",header=F,na.strings=c("", "NA"))
summary(EEPS)
t<-tail(EEPS)
nrow(EEPS)
colnames(EEPS)<-c("AuthorityNumber", "Territory", "FormType", "DateCreated", "IssuedTo", "Reason", "PlaceTime", "PlaceRTC", "RemoveTime","Limits")
class(EEPS$DateCreated)
#switch from factor to character
EEPS$DateCreated<-as.character(EEPS$DateCreated)
library(lubridate)
#new data created reformat
EEPS$newDateCreated<-ymd_hms(EEPS$DateCreated)
#some dates didn't parse - possible missing data.
EEPS$YearCreated<-year(EEPS$newDateCreated)
EEPS$MonthCreated<-month(EEPS$newDateCreated)
EEPS$DayCreated<-day(EEPS$newDateCreated)
#new place time, reformatted
EEPS$newPlaceTime<-ymd_hms(EEPS$PlaceTime)
#some dates didn't parse - possible missing data.
EEPS$YearPlaced<-year(EEPS$newPlaceTime)
EEPS$MonthPlaced<-month(EEPS$newPlaceTime)
EEPS$DayPlaced<-day(EEPS$newPlaceTime)
EEPS$HourPlaced<-hour(EEPS$newPlaceTime)
EEPS$MinutePlaced<-minute(EEPS$newPlaceTime)
#new remove time, reformatted
EEPS$newRemoveTime<-ymd_hms(EEPS$RemoveTime)
#some dates didn't parse - possible missing data.
EEPS$YearRemoved<-year(EEPS$newRemoveTime)
EEPS$MonthRemoved<-month(EEPS$newRemoveTime)
EEPS$DayRemoved<-day(EEPS$newRemoveTime)
EEPS$HourRemoved<-hour(EEPS$newRemoveTime)
EEPS$MinuteRemoved<-minute(EEPS$newRemoveTime)
library(stringr)
#find CP in the string (may occur several times,
#but just the first two should provide the CP
#information that we need
#use the limit column
alltxt<-as.character(EEPS$Limits)
#get the text location of "CP" for all rows
EEPS$CPloc<-str_locate_all(pattern ='CP',alltxt)
EEPS[EEPS$CPloc==""]  <- NA
exists<- function (x) {
if(nrow(x)>=1 & ncol(x)>=2) {
a=x[1,2]+1
}else{
a=NA
}
return(a)
}
start1<-sapply(EEPS$CPloc,function(x) (exists(x)))
CPNum<-substr(alltxt, start1, start1+3)
CPNum1<-gsub('[^0-9]',"",CPNum)
EEPS$StartCP<-CPNum1
#some CPs are showing up with an extra two numbers, reduce to just two
trunc4 <- function (x){
if(nchar(x)>3){
return(substring(x,1,2))
}else{
return(x)
}
}
EEPS$StartCP<-as.numeric(sapply(EEPS$StartCP,function(x) (trunc4(x))))
#find CP End
exists2<- function (x) {
if(nrow(x)>=2 & ncol(x)>=2) {
a=x[2,2]+1
}else{
a=NA
}
return(a)
}
start2<-sapply(EEPS$CPloc,function(x) (exists2(x)))
CPNum.2<-substr(alltxt, start2, start2+3)
CPNum1.2<-gsub('[^0-9]',"",CPNum.2)
EEPS$EndCP<-CPNum1.2
EEPS$EndCP<-as.numeric(sapply(EEPS$EndCP,function(x) (trunc4(x))))
checkCPs<-EEPS[,c("Limits","StartCP","EndCP")]
View(EEPS)
EEPS$elapsedTime<-EEPS$newPlaceTime-EEPS$NewREmoveTime
EEPS$newPlaceTime[1]
EEPS$newPlaceTime[1]-EEPS$NewREmoveTime[1]
EEPS$NewREmoveTime[1]
span<-EEPS$newPlaceTime[1]-EEPS$NewREmoveTime[1]
span
EEPS$newPlaceTime[1]
EEPS$NewREmoveTime[1]
span<-EEPS$newPlaceTime[1]-EEPS$NewRemoveTime[1]
span
EEPS$NewRemoveTime[1]
span<-EEPS$newPlaceTime[1]-EEPS$newRemoveTime[1]
span
EEPS$span<-EEPS$newPlaceTime-EEPS$newRemoveTime
View(EEPS)
EEPS$span<-EEPS$newRemoveTime-EEPS$newPlaceTime
View(EEPS)
EEPS$span<-(EEPS$newRemoveTime-EEPS$newPlaceTime)/60
View(EEPS)
EEPS$spanMinutes<-(EEPS$newRemoveTime-EEPS$newPlaceTime)/60
EEPS$spanHours <-EEPS$spanMinutes/60
View(EEPS)
EEPS$span<-(EEPS$newRemoveTime-EEPS$newPlaceTime)/60
View(EEPS)
View(EEPS)
colnames(EEPS)
as.dataframe(colnames)
as.data.frame(colnames)
c<-as.data.frame(colnames)
as.data.frame(colnames(EEPS))
EEPS[,"Territory","FormType","Reason",
"YearPlaced","MonthPlaced",
"DayPlaced","StartCP","EndCP","span"]
"DayPlaced","StartCP","EndCP","span")]
EEPS[,c("Territory","FormType","Reason","YearPlaced","MonthPlaced","DayPlaced","StartCP","EndCP","span")]
EEPS[,"Territory"]
EEPS[,c("Territory","FormType"]
EEPS[,c("Territory","FormType")]
EEPS[c("Territory","FormType")]
EEPS["FormType"]
EEPS[c("Territory","FormType")]
mtcars[c("mpg", "hp")]
EEPS[,c("Territory","FormType")]
checkCPs<-EEPS[,c("Limits","StartCP","EndCP")]
checkCPs
test1<-EEPS[,c("Territory","FormType")]
EEPS[,c("Limits","StartCP","EndCP")]
EEPS[,c("Limits","StartCP","EndCP")]
checkCPs
checkCPs<-EEPS[,c("Limits","StartCP","EndCP")]
View(EEPS)
test1<-EEPS[,c(1:3)]
EEPS[,c("Limits","StartCP","EndCP")]
test1<-EEPS[,"Territory"]
test1
test1<-EEPS["Territory"]
test1
View(test1)
test1<-EEPS[,"Territory"]
test1<-EEPS["Territory"]
View(test1)
test1<-EEPS[c("Territory")]
"StartCP","EndCP","span")]
EEPS[,c("Territory","FormType")]
EEPS[c("Territory","FormType")]
View(EEPS)
EEPS[,c("Territory","FormType")]
A <- matrix(c(0,1/2,1/2,0,0,0,0,0,0,0,0,0,1/3,1/3,0,0,1/3,0,0,0,0,0,1/2,1/2,0,0,0,1/2,0,1/2,0,0,0,1,0,0), nrow = 6, ncol = 6, byrow = FALSE)
A
A <- matrix(c(0,1/2,1/2,0,0,0,0,0,0,0,0,0,1/3,1/3,0,0,1/3,0,0,0,0,0,1/2,1/2,0,0,0,1/2,0,1/2,0,0,0,1,0,0), nrow = 6, ncol = 6, byrow = T)
A
options(digits=2)
A <- matrix(c(0,1/2,1/2,0,0,0,0,0,0,0,0,0,1/3,1/3,0,0,1/3,0,0,0,0,0,1/2,1/2,0,0,0,1/2,0,1/2,0,0,0,1,0,0), nrow = 6, ncol = 6, byrow = T)
A
n=6
B <- 0.85 * A + 0.15/n
n <- 6
B <- 0.85 * A + 0.15/n
B
r <- matrix(c(1/6)*6, nrow = 6, ncol = 1, byrow = T)
r
r <- matrix(c(1/6,1/6,1/6,1/6,1/6,1/6), nrow = 6, ncol = 1, byrow = T)
r
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("boot")
library(shiny)
install.packages("Rcpp")
library(shiny)
library(shiny)
shinyApp(
ui = fluidPage(leafletOutput('myMap')),
server = function(input, output) {
# download and load data
url = "https://github.com/Robinlovelace/sdvwR/raw/master/data/gps-trace.gpx"
download.file(url, destfile = "shef2leeds.gpx", method = "wget", )
library(rgdal)
shef2leeds <- readOGR("shef2leeds.gpx", layer = "tracks")
map = leaflet() %>% addTiles() %>% setView(-1.5, 53.4, 9) %>%
addPolylines(data = shef2leeds, color = "red", weight = 4)
output$myMap = renderLeaflet(map)
}
)
library(shiny)
library(leafletR)
shinyApp(
ui = fluidPage(leafletOutput('myMap')),
server = function(input, output) {
# download and load data
url = "https://github.com/Robinlovelace/sdvwR/raw/master/data/gps-trace.gpx"
download.file(url, destfile = "shef2leeds.gpx", method = "wget", )
library(rgdal)
shef2leeds <- readOGR("shef2leeds.gpx", layer = "tracks")
map = leaflet() %>% addTiles() %>% setView(-1.5, 53.4, 9) %>%
addPolylines(data = shef2leeds, color = "red", weight = 4)
output$myMap = renderLeaflet(map)
}
)
shiny::runApp('IS 608 final project/map-test')
shiny::runApp('IS 608 final project/map-test')
shiny::runApp('IS 608 final project/map-test')
shiny::runApp('IS 608 final project/map-test')
shiny::runApp('IS 608 final project/map-test')
shiny::runApp('IS 608 final project/map-test')
shiny::runApp('IS 608 final project/map-test')
install.packages("htmlwidgets")
shiny::runApp('IS 608 final project/map-test')
shiny::runApp('IS 608 final project/map-test')
shiny::runApp('IS 608 final project/map-test')
install.packages("leaflet-shiny")
shiny::runApp('IS 608 final project/App-2')
devtools::install_github("rstudio/leaflet")
library(leaflet)
shiny::runApp('IS 608 final project/App-2')
shiny::runApp('IS 608 final project/App-2')
shiny::runApp('IS 608 final project/App-2')
library(leaflet)
m = leaflet() %>% addTiles()
m  # a map with the default OSM tile layer
library(leaflet)
m = m %>% setView(-93.65, 42.0285, zoom = 17)
m
library(leaflet)
leaflet()
m = leaflet() %>% addTiles()
m
m = m %>% setView(-93.65, 42.0285, zoom = 17)
m
m %>% addPopups(-93.65, 42.0285, 'Here is the <b>Department of Statistics</b>, ISU')
m
m %>% addPopups(-93.65, 42.0285, 'Here is the <b>Department of Statistics</b>, ISU')
m = m %>% setView(-93.65, 42.0285, zoom = 17)
m
m %>% addPopups(-93.65, 42.0285, 'Here is the <b>Department of Statistics</b>, ISU')
m = leaflet() %>% addTiles()
m
m %>% addGeoJSON("C:/Users/117284/Documents/IS 608 final project/App-2")
m %>% addGeoJSON("C:/Users/117284/Documents/IS 608 final project/App-2")
shiny::runApp('IS 608 final project/All Final Project Files/App Files')
shiny::runApp('IS 608 final project/All Final Project Files/App Files')
shiny::runApp('IS 608 final project/All Final Project Files/App Files')
shiny::runApp('IS 608 final project/All Final Project Files/App Files')
shiny::runApp('IS 608 final project/All Final Project Files/App Files')
shiny::runApp('IS 608 final project/All Final Project Files/App Files')
shiny::runApp('IS 608 final project/All Final Project Files/App Files')
yr_in2 <- 2010
build_in2 <- "Co-op"
n_data<-read.csv("n_stats_all.csv")  #neighborhood stats
shiny::runApp('IS 608 final project/All Final Project Files/App Files')
n_data<-read.csv("n_stats_all.csv")  #neighborhood stats
setwd("C:/Users/117284/Documents/IS 608 final project/All Final Project Files/App Files")
n_data<-read.csv("n_stats_all.csv")  #neighborhood stats
nbhd_data3$Median_Price/nbhd_data3$Median_Price_2003
yr_in3 <- 2010
build_in3 <- "Co-op"
nbhd_data3 <- setNames(data.frame(n_data[,1],n_data[,p_col_name3],n_data[,P03_col_name3]),
c("Neighborhood","Median_Price","Median_Price_2003"))
if (build_in3 == "Co-op"){
build_in3 <- "Coop"
}
#create column name for price and 2003 price
if (build_in3 == "All"){
p_col_name3 <- paste0("P.",yr_in3)
P03_col_name3 <- paste0("P.",2003)   } else {
p_col_name3 <- paste0("P.",build_in3,".",yr_in3)
P03_col_name3 <- paste0("P.",build_in3,".",2003)
}
nbhd_data3 <- setNames(data.frame(n_data[,1],n_data[,p_col_name3],n_data[,P03_col_name3]),
c("Neighborhood","Median_Price","Median_Price_2003"))
View(nbhd_data3)
nbhd_data3$Median_Price/nbhd_data3$Median_Price_2003-1
nbhd_data3$Pct_Change<-nbhd_data3$Median_Price/nbhd_data3$Median_Price_2003-1
View(nbhd_data3)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
max(nbhd_data3$Pct_Change)
nbhd_data3$Pct_Change
min(nbhd_data3$Pct_Change)
View(nbhd_data3)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
n_data<-read.csv("n_stats_all.csv")  #neighborhood stats
n_data$id <- 1:nrow(n_data)  # Add an id column to use as the key for ggvis tooltip
yr_in <- 2003
build_in <- "Co-op"
if (build_in == "Co-op"){
build_in <- "Coop"
}
if (build_in == "All"){
p_col_name <- paste0("P.",yr_in)
v_col_name <- paste0("V.",yr_in)   } else {
p_col_name <- paste0("P.",build_in,".",yr_in)
v_col_name <- paste0("V.",build_in,".",yr_in)
}
nbhd_data <- setNames(data.frame(n_data[,1],n_data[,p_col_name],n_data[,v_col_name],n_data[,"id"]),
c("Neighborhood","Median_Price","Volume","id"))
View(nbhd_data)
View(n_data)
View(n_data)
nbhd_data
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
filter(!is.na(Volume))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
yr_in <- 2003
build_in <- "Co-op"
n_data<-read.csv("n_stats_all.csv")  #neighborhood stats
n_data$id <- 1:nrow(n_data)  # Add an id column to use as the key for ggvis tooltip
if (build_in == "Co-op"){
build_in <- "Coop"
}
if (build_in == "All"){
p_col_name <- paste0("P.",yr_in)
v_col_name <- paste0("V.",yr_in)   } else {
p_col_name <- paste0("P.",build_in,".",yr_in)
v_col_name <- paste0("V.",build_in,".",yr_in)
}
nbhd_data <- setNames(data.frame(n_data[,1],n_data[,p_col_name],n_data[,v_col_name],n_data[,"id"]),
c("Neighborhood","Median_Price","Volume","id"))
View(nbhd_data)
yr_in <- 2014
build_in <- "Co-op"
if (build_in == "Co-op"){
build_in <- "Coop"
}
#create column name for price and volume
if (build_in == "All"){
p_col_name <- paste0("P.",yr_in)
v_col_name <- paste0("V.",yr_in)   } else {
p_col_name <- paste0("P.",build_in,".",yr_in)
v_col_name <- paste0("V.",build_in,".",yr_in)
}
#get the data by neighborhood for the selected inputs
nbhd_data <- setNames(data.frame(n_data[,1],n_data[,p_col_name],n_data[,v_col_name],n_data[,"id"]),
c("Neighborhood","Median_Price","Volume","id"))
#trying to get rid of na's, test what this does
View(nbhd_data)
View(n_data)
View(n_data)
yr_in <- 2003
build_in <- "Condop"
if (build_in == "Co-op"){
build_in <- "Coop"
}
#create column name for price and volume
if (build_in == "All"){
p_col_name <- paste0("P.",yr_in)
v_col_name <- paste0("V.",yr_in)   } else {
p_col_name <- paste0("P.",build_in,".",yr_in)
v_col_name <- paste0("V.",build_in,".",yr_in)
}
#get the data by neighborhood for the selected inputs
nbhd_data <- setNames(data.frame(n_data[,1],n_data[,p_col_name],n_data[,v_col_name],n_data[,"id"]),
c("Neighborhood","Median_Price","Volume","id"))
View(nbhd_data)
nbhd_data[complete.cases(nbhd_data),]
View(nbhd_data)
nbhd_data <- nbhd_data[complete.cases(nbhd_data),]
View(nbhd_data)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
year_in4 <- 2003
build_in4 <- "All"
if (build_in4 == "Co-op"){
build_in4 <- "Coop"
}
paste0("html_maps/MedPrice",build_in4,yr_in4,".html")
yr_in4 <- 2003
build_in4 <- "All"
if (build_in4 == "Co-op"){
build_in4 <- "Coop"
}
paste0("html_maps/MedPrice",build_in4,yr_in4,".html")
shiny::runApp('C:/temp/ManhattanRealEstate')
shiny::runApp('C:/temp/ManhattanRealEstate')
shiny::runApp('C:/temp/ManhattanRealEstate')
