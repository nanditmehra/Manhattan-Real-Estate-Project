EEPS$MonthCreated<-month(EEPS$newDateCreated)
EEPS$DayCreated<-day(EEPS$newDateCreated)
#new place time, reformatted
EEPS$newPlaceTime<-ymd_hms(EEPS$PlaceTime)
#some dates didn't parse - possible missing data.
EEPS$YearPlaced<-year(EEPS$newPlaceTime)
EEPS$MonthPlaced<-month(EEPS$newPlaceTime)
EEPS$DayPlaced<-day(EEPS$newPlaceTime)
EEPS$HourPlaced<-hour(EEPS$newPlaceTime)
EEPS$MinutePlaced<-minute(EEPS$newPlaceTime)
#new remove time, reformatted
EEPS$newRemoveTime<-ymd_hms(EEPS$RemoveTime)
#some dates didn't parse - possible missing data.
EEPS$YearRemoved<-year(EEPS$newRemoveTime)
EEPS$MonthRemoved<-month(EEPS$newRemoveTime)
EEPS$DayRemoved<-day(EEPS$newRemoveTime)
EEPS$HourRemoved<-hour(EEPS$newRemoveTime)
EEPS$MinuteRemoved<-minute(EEPS$newRemoveTime)
library(stringr)
#find CP in the string (may occur several times,
#but just the first two should provide the CP
#information that we need
#use the limit column
alltxt<-as.character(EEPS$Limits)
#get the text location of "CP" for all rows
EEPS$CPloc<-str_locate_all(pattern ='CP',alltxt)
EEPS[EEPS$CPloc==""]  <- NA
exists<- function (x) {
if(nrow(x)>=1 & ncol(x)>=2) {
a=x[1,2]+1
}else{
a=NA
}
return(a)
}
start1<-sapply(EEPS$CPloc,function(x) (exists(x)))
CPNum<-substr(alltxt, start1, start1+3)
CPNum1<-gsub('[^0-9]',"",CPNum)
EEPS$StartCP<-CPNum1
#some CPs are showing up with an extra two numbers, reduce to just two
trunc4 <- function (x){
if(nchar(x)>3){
return(substring(x,1,2))
}else{
return(x)
}
}
EEPS$StartCP<-as.numeric(sapply(EEPS$StartCP,function(x) (trunc4(x))))
#find CP End
exists2<- function (x) {
if(nrow(x)>=2 & ncol(x)>=2) {
a=x[2,2]+1
}else{
a=NA
}
return(a)
}
start2<-sapply(EEPS$CPloc,function(x) (exists2(x)))
CPNum.2<-substr(alltxt, start2, start2+3)
CPNum1.2<-gsub('[^0-9]',"",CPNum.2)
EEPS$EndCP<-CPNum1.2
EEPS$EndCP<-as.numeric(sapply(EEPS$EndCP,function(x) (trunc4(x))))
checkCPs<-EEPS[,c("Limits","StartCP","EndCP")]
View(EEPS)
EEPS$elapsedTime<-EEPS$newPlaceTime-EEPS$NewREmoveTime
EEPS$newPlaceTime[1]
EEPS$newPlaceTime[1]-EEPS$NewREmoveTime[1]
EEPS$NewREmoveTime[1]
span<-EEPS$newPlaceTime[1]-EEPS$NewREmoveTime[1]
span
EEPS$newPlaceTime[1]
EEPS$NewREmoveTime[1]
span<-EEPS$newPlaceTime[1]-EEPS$NewRemoveTime[1]
span
EEPS$NewRemoveTime[1]
span<-EEPS$newPlaceTime[1]-EEPS$newRemoveTime[1]
span
EEPS$span<-EEPS$newPlaceTime-EEPS$newRemoveTime
View(EEPS)
EEPS$span<-EEPS$newRemoveTime-EEPS$newPlaceTime
View(EEPS)
EEPS$span<-(EEPS$newRemoveTime-EEPS$newPlaceTime)/60
View(EEPS)
EEPS$spanMinutes<-(EEPS$newRemoveTime-EEPS$newPlaceTime)/60
EEPS$spanHours <-EEPS$spanMinutes/60
View(EEPS)
EEPS$span<-(EEPS$newRemoveTime-EEPS$newPlaceTime)/60
View(EEPS)
View(EEPS)
colnames(EEPS)
as.dataframe(colnames)
as.data.frame(colnames)
c<-as.data.frame(colnames)
as.data.frame(colnames(EEPS))
EEPS[,"Territory","FormType","Reason",
"YearPlaced","MonthPlaced",
"DayPlaced","StartCP","EndCP","span"]
"DayPlaced","StartCP","EndCP","span")]
EEPS[,c("Territory","FormType","Reason","YearPlaced","MonthPlaced","DayPlaced","StartCP","EndCP","span")]
EEPS[,"Territory"]
EEPS[,c("Territory","FormType"]
EEPS[,c("Territory","FormType")]
EEPS[c("Territory","FormType")]
EEPS["FormType"]
EEPS[c("Territory","FormType")]
mtcars[c("mpg", "hp")]
EEPS[,c("Territory","FormType")]
checkCPs<-EEPS[,c("Limits","StartCP","EndCP")]
checkCPs
test1<-EEPS[,c("Territory","FormType")]
EEPS[,c("Limits","StartCP","EndCP")]
EEPS[,c("Limits","StartCP","EndCP")]
checkCPs
checkCPs<-EEPS[,c("Limits","StartCP","EndCP")]
View(EEPS)
test1<-EEPS[,c(1:3)]
EEPS[,c("Limits","StartCP","EndCP")]
test1<-EEPS[,"Territory"]
test1
test1<-EEPS["Territory"]
test1
View(test1)
test1<-EEPS[,"Territory"]
test1<-EEPS["Territory"]
View(test1)
test1<-EEPS[c("Territory")]
"StartCP","EndCP","span")]
EEPS[,c("Territory","FormType")]
EEPS[c("Territory","FormType")]
View(EEPS)
EEPS[,c("Territory","FormType")]
A <- matrix(c(0,1/2,1/2,0,0,0,0,0,0,0,0,0,1/3,1/3,0,0,1/3,0,0,0,0,0,1/2,1/2,0,0,0,1/2,0,1/2,0,0,0,1,0,0), nrow = 6, ncol = 6, byrow = FALSE)
A
A <- matrix(c(0,1/2,1/2,0,0,0,0,0,0,0,0,0,1/3,1/3,0,0,1/3,0,0,0,0,0,1/2,1/2,0,0,0,1/2,0,1/2,0,0,0,1,0,0), nrow = 6, ncol = 6, byrow = T)
A
options(digits=2)
A <- matrix(c(0,1/2,1/2,0,0,0,0,0,0,0,0,0,1/3,1/3,0,0,1/3,0,0,0,0,0,1/2,1/2,0,0,0,1/2,0,1/2,0,0,0,1,0,0), nrow = 6, ncol = 6, byrow = T)
A
n=6
B <- 0.85 * A + 0.15/n
n <- 6
B <- 0.85 * A + 0.15/n
B
r <- matrix(c(1/6)*6, nrow = 6, ncol = 1, byrow = T)
r
r <- matrix(c(1/6,1/6,1/6,1/6,1/6,1/6), nrow = 6, ncol = 1, byrow = T)
r
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("boot")
library(shiny)
install.packages("Rcpp")
library(shiny)
library(shiny)
shinyApp(
ui = fluidPage(leafletOutput('myMap')),
server = function(input, output) {
# download and load data
url = "https://github.com/Robinlovelace/sdvwR/raw/master/data/gps-trace.gpx"
download.file(url, destfile = "shef2leeds.gpx", method = "wget", )
library(rgdal)
shef2leeds <- readOGR("shef2leeds.gpx", layer = "tracks")
map = leaflet() %>% addTiles() %>% setView(-1.5, 53.4, 9) %>%
addPolylines(data = shef2leeds, color = "red", weight = 4)
output$myMap = renderLeaflet(map)
}
)
library(shiny)
library(leafletR)
shinyApp(
ui = fluidPage(leafletOutput('myMap')),
server = function(input, output) {
# download and load data
url = "https://github.com/Robinlovelace/sdvwR/raw/master/data/gps-trace.gpx"
download.file(url, destfile = "shef2leeds.gpx", method = "wget", )
library(rgdal)
shef2leeds <- readOGR("shef2leeds.gpx", layer = "tracks")
map = leaflet() %>% addTiles() %>% setView(-1.5, 53.4, 9) %>%
addPolylines(data = shef2leeds, color = "red", weight = 4)
output$myMap = renderLeaflet(map)
}
)
shiny::runApp('IS 608 final project/map-test')
shiny::runApp('IS 608 final project/map-test')
shiny::runApp('IS 608 final project/map-test')
shiny::runApp('IS 608 final project/map-test')
shiny::runApp('IS 608 final project/map-test')
shiny::runApp('IS 608 final project/map-test')
shiny::runApp('IS 608 final project/map-test')
install.packages("htmlwidgets")
shiny::runApp('IS 608 final project/map-test')
shiny::runApp('IS 608 final project/map-test')
shiny::runApp('IS 608 final project/map-test')
install.packages("leaflet-shiny")
shiny::runApp('IS 608 final project/App-2')
devtools::install_github("rstudio/leaflet")
library(leaflet)
shiny::runApp('IS 608 final project/App-2')
shiny::runApp('IS 608 final project/App-2')
shiny::runApp('IS 608 final project/App-2')
library(leaflet)
m = leaflet() %>% addTiles()
m  # a map with the default OSM tile layer
library(leaflet)
m = m %>% setView(-93.65, 42.0285, zoom = 17)
m
library(leaflet)
leaflet()
m = leaflet() %>% addTiles()
m
m = m %>% setView(-93.65, 42.0285, zoom = 17)
m
m %>% addPopups(-93.65, 42.0285, 'Here is the <b>Department of Statistics</b>, ISU')
m
m %>% addPopups(-93.65, 42.0285, 'Here is the <b>Department of Statistics</b>, ISU')
m = m %>% setView(-93.65, 42.0285, zoom = 17)
m
m %>% addPopups(-93.65, 42.0285, 'Here is the <b>Department of Statistics</b>, ISU')
m = leaflet() %>% addTiles()
m
m %>% addGeoJSON("C:/Users/117284/Documents/IS 608 final project/App-2")
m %>% addGeoJSON("C:/Users/117284/Documents/IS 608 final project/App-2")
setwd("C:/Users/117284/Documents/IS 608 final project/App-2")
library(RColorBrewer)
library(leafletR)
leafdatM2<-"Manhattan2.geojson"
#import subdatM2 data file
subdatM2 <- read.csv("subdatM2.csv")
# ----- Create the cuts
cutsM2<-round(quantile(subdatM2$P.2014, probs = seq(0, 1, 0.20), na.rm = T), 0)
cutsM2[1]<-0 # ----- for this example make first cut zero
# ----- Fields to include in the popup
# I think will ultimately use the shiny inputs here, will need to edit for that
#colnames(subdatM2)
popupM2<-c("POSTAL","P.2014")
pal <- brewer.pal(5, "Reds")
a<-2014
styM2<-styleGrad(prop="P.2014", breaks=cutsM2, right=FALSE, style.par="col",
style.val=pal, leg=paste(a," Median Price ($ in 000s)"), lwd=1)
# ----- Create the map and load into browser
mapM<-leaflet(data=leafdatM2,style=styM2,
title="Manhattan Real Estate Prices", base.map="osm",
incl.data=TRUE,  popup=popupM2)
# ----- to look at the map you can use this code
browseURL(mapM)
library(leaflet)  #source for leaflet
leafdatM2<-"Manhattan2.geojson"
#import subdatM2 data file
subdatM2 <- read.csv("subdatM2.csv")
# ----- Create the cuts
cutsM2<-round(quantile(subdatM2$P.2014, probs = seq(0, 1, 0.20), na.rm = T), 0)
cutsM2[1]<-0 # ----- for this example make first cut zero
# ----- Fields to include in the popup
# I think will ultimately use the shiny inputs here, will need to edit for that
#colnames(subdatM2)
popupM2<-c("POSTAL","P.2014")
pal <- brewer.pal(5, "Reds")
a<-2014
styM2<-styleGrad(prop="P.2014", breaks=cutsM2, right=FALSE, style.par="col",
style.val=pal, leg=paste(a," Median Price ($ in 000s)"), lwd=1)
# ----- Create the map and load into browser
mapM<-leaflet(data=leafdatM2,style=styM2,
title="Manhattan Real Estate Prices", base.map="osm",
incl.data=TRUE,  popup=popupM2)
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(RColorBrewer)
library(leafletR)
#geojson file directory
leafdatM2<-"Manhattan2.geojson"
#import subdatM2 data file
subdatM2 <- read.csv("subdatM2.csv")
# ----- Create the cuts
cutsM2<-round(quantile(subdatM2$P.2014, probs = seq(0, 1, 0.20), na.rm = T), 0)
cutsM2[1]<-0 # ----- for this example make first cut zero
# ----- Fields to include in the popup
# I think will ultimately use the shiny inputs here, will need to edit for that
#colnames(subdatM2)
popupM2<-c("POSTAL","P.2014")
pal <- brewer.pal(5, "Reds")
a<-2014
styM2<-styleGrad(prop="P.2014", breaks=cutsM2, right=FALSE, style.par="col",
style.val=pal, leg=paste(a," Median Price ($ in 000s)"), lwd=1)
# ----- Create the map and load into browser
mapM<-leaflet(data=leafdatM2,style=styM2,
title="Manhattan Real Estate Prices", base.map="osm",
incl.data=TRUE,  popup=popupM2)
# ----- to look at the map you can use this code
browseURL(mapM)
leafdatM2<-"Manhattan2.geojson"
#import subdatM2 data file
subdatM2 <- read.csv("subdatM2.csv")
c_slct <- "P.2014"
# ----- Create the cuts
cutsM2<-round(quantile(subdatM2$c_slct, probs = seq(0, 1, 0.20), na.rm = T), 0)
cutsM2[1]<-0 # ----- for this example make first cut zero
# ----- Fields to include in the popup
# I think will ultimately use the shiny inputs here, will need to edit for that
#colnames(subdatM2)
popupM2<-c("POSTAL","c_slct")
pal <- brewer.pal(5, "Reds")
a<-2014
styM2<-styleGrad(prop="c_slct", breaks=cutsM2, right=FALSE, style.par="col",
style.val=pal, leg=paste(a," Median Price ($ in 000s)"), lwd=1)
# ----- Create the map and load into browser
mapM<-leaflet(data=leafdatM2,style=styM2,
title="Manhattan Real Estate Prices", base.map="osm",
incl.data=TRUE,  popup=popupM2)
# ----- to look at the map you can use this code
browseURL(mapM)
#geojson file directory
leafdatM2<-"Manhattan2.geojson"
#import subdatM2 data file
subdatM2 <- read.csv("subdatM2.csv")
# ----- Create the cuts
cutsM2<-round(quantile(subdatM2$P.2014, probs = seq(0, 1, 0.20), na.rm = T), 0)
cutsM2[1]<-0 # ----- for this example make first cut zero
# ----- Fields to include in the popup
# I think will ultimately use the shiny inputs here, will need to edit for that
#colnames(subdatM2)
popupM2<-c("POSTAL","P.2014")
pal <- brewer.pal(5, "Reds")
a<-2014
styM2<-styleGrad(prop="P.2014", breaks=cutsM2, right=FALSE, style.par="col",
style.val=pal, leg=paste(a," Median Price ($ in 000s)"), lwd=1)
# ----- Create the map and load into browser
mapM<-leaflet(data=leafdatM2,style=styM2,
title="Manhattan Real Estate Prices", base.map="osm",
incl.data=TRUE,  popup=popupM2)
# ----- to look at the map you can use this code
browseURL(mapM)
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("D:/CUNY Files/IS 608/All Final Project Files/create maps")
library(RColorBrewer)
library(leafletR)
leafdat<-"Manhattan2.geojson"
#import subdatM2 data file
data <- read.csv("subdatM2.csv")
#colnames(data)
#only looking at price for the heatmap
#create a zipcode data file with price fields only
z_data <-read.csv("z_stats_all.csv")
col<-ncol(z_data)/2
rangep <- c(1:col)*2+1
rangep <- c(1,rangep)
cuts_data <- z_data[,rangep]
m<-ncol(cuts_data)
cuts<-round(quantile(cuts_data[,2:m], probs = seq(0, 1, 0.20), na.rm = T), 0)
cuts[1]<-0 # ----- for this example make first cut zero
cuts
shiny::runApp('D:/CUNY Files/IS 608/All Final Project Files/App Files')
shiny::runApp('D:/CUNY Files/IS 608/All Final Project Files/App Files')
if (build_in == "Co-op"){
build_in <- "Coop"
}
shiny::runApp('D:/CUNY Files/IS 608/All Final Project Files/App Files')
setwd("D:/CUNY Files/IS 608/All Final Project Files/csv data files")
n_data<-read.csv("n_stats_all.csv")
bar<-ggplot(n_data, aes(x=Neighborhood,y=P.2003)) +
geom_bar(stat="identity",color="darkblue",fill="steelblue") +
xlab("Neighborhood") +  ylab("Price ($ in 00s)") +
coord_flip()+
ggtitle("Manhattan Real Estate Sales")+
theme(panel.background = element_blank(),
axis.line = element_line(colour = "black"))
bar
n_data$Neighborhood <- reorder(n_data$Neighborhood, n_data$P.2003)
bar
n_data$Neighborhood <- reorder(n_data$Neighborhood, n_data$P.2003)
bar<-ggplot(n_data, aes(x=Neighborhood,y=P.2003)) +
geom_bar(stat="identity",color="darkblue",fill="steelblue") +
xlab("Neighborhood") +  ylab("Price ($ in 00s)") +
coord_flip()+
ggtitle("Manhattan Real Estate Sales")+
theme(panel.background = element_blank(),
axis.line = element_line(colour = "black"))
bar
n_data$Neighborhood <- reorder(n_data$Neighborhood, n_data$Neighborhood)
warnings()
n_data$Neighborhood <- reorder(n_data$Neighborhood, n_data$P.2003)
bar<-ggplot(n_data, aes(x=Neighborhood,y=P.2003)) +
geom_bar(stat="identity",color="darkblue",fill="steelblue") +
xlab("Neighborhood") +  ylab("Price ($ in 00s)") +
coord_flip()+
ggtitle("Manhattan Real Estate Sales")+
theme(panel.background = element_blank(),
axis.line = element_line(colour = "black"))
bar
n_data<-read.csv("n_stats_all.csv")
bar<-ggplot(n_data, aes(x=Neighborhood,y=P.2003)) +
geom_bar(stat="identity",color="darkblue",fill="steelblue") +
xlab("Neighborhood") +  ylab("Price ($ in 00s)") +
coord_flip()+
ggtitle("Manhattan Real Estate Sales")+
theme(panel.background = element_blank(),
axis.line = element_line(colour = "black"))
bar
bar<-ggplot(n_data, aes(x=Neighborhood,y=P.2010)) +
geom_bar(stat="identity",color="darkblue",fill="steelblue") +
geom_point(n_data, aes(x=Neighborhood, y=P.2003),color="red",fill="red")+
xlab("Neighborhood") +  ylab("Price ($ in 00s)") +
coord_flip()+
ggtitle("Manhattan Real Estate Sales")+
theme(panel.background = element_blank(),
axis.line = element_line(colour = "black"))
bar
bar<-ggplot(n_data, aes(x=Neighborhood,y=P.2010)) +
geom_bar(stat="identity",color="darkblue",fill="steelblue") +
geom_point(n_data, aes(x=Neighborhood, y=P.2003),color="red",fill="red")+
bar
View(n_data)
bar<-ggplot(n_data, aes(x=Neighborhood,y=P.2010)) +
#geom_bar(stat="identity",color="darkblue",fill="steelblue") +
geom_point(n_data, aes(x=Neighborhood, y=P.2003),color="red",fill="red")+
xlab("Neighborhood") +  ylab("Price ($ in 00s)") +
coord_flip()+
ggtitle("Manhattan Real Estate Sales")+
theme(panel.background = element_blank(),
axis.line = element_line(colour = "black"))
bar
bar
ggplot(n_data, aes(x=Neighborhood,y=P.2010)) +
geom_bar(stat="identity",color="darkblue",fill="steelblue")
+
geom_point(n_data, aes(x=Neighborhood, y=P.2003),color="red",fill="red")
bar<-ggplot(n_data, aes(x=Neighborhood,y=P.2010)) +
geom_bar(stat="identity",color="darkblue",fill="steelblue") +
geom_point(data=n_data, aes(x=Neighborhood,y=P.2003),color="red",fill="red")+
xlab("Neighborhood") +  ylab("Price ($ in 00s)") +
coord_flip()+
ggtitle("Manhattan Real Estate Sales")+
theme(panel.background = element_blank(),
axis.line = element_line(colour = "black"))
bar
bar<-ggplot(n_data, aes(x=Neighborhood,y=P.2010)) +
geom_bar(stat="identity",color="darkblue",fill="steelblue") +
geom_point(data=n_data, aes(x=Neighborhood,y=P.2003),color="darkred",fill="darkred")+
xlab("Neighborhood") +  ylab("Price ($ in 00s)") +
coord_flip()+
ggtitle("Manhattan Real Estate Sales")+
theme(panel.background = element_blank(),
axis.line = element_line(colour = "black"))
bar
cols <- c("2010"="#3591d1","2003"="#62c76b")
bar<-ggplot(n_data, aes(x=Neighborhood,y=P.2010)) +
geom_bar(stat="identity",color="darkblue",fill="steelblue") +
geom_point(data=n_data, aes(x=Neighborhood,y=P.2003),color="darkred",fill="darkred")+
xlab("Neighborhood") +  ylab("Median Price ($ in 000s)") +
coord_flip()+
ggtitle("Manhattan Real Estate Sales")+
theme(panel.background = element_blank(),
axis.line = element_line(colour = "black"))+
scale_colour_manual(name="2010",values=cols) +
scale_fill_manual(name="2003",values=cols) +
bar
bar<-ggplot(n_data, aes(x=Neighborhood,y=P.2010)) +
geom_bar(stat="identity",color="darkblue",fill="steelblue") +
geom_point(data=n_data, aes(x=Neighborhood,y=P.2003),color="darkred",fill="darkred")+
xlab("Neighborhood") +  ylab("Median Price ($ in 000s)") +
coord_flip()+
ggtitle("Manhattan Real Estate Sales")+
theme(panel.background = element_blank(),
axis.line = element_line(colour = "black"))+
scale_colour_manual(name="2010",values=cols) +
scale_fill_manual(name="2003",values=cols)
bar
bar<-ggplot(n_data, aes(x=Neighborhood,y=P.2010)) +
geom_bar(stat="identity",color="darkblue",fill="steelblue") +
geom_point(data=n_data, aes(x=Neighborhood,y=P.2003),color="darkred",fill="darkred")+
xlab("Neighborhood") +  ylab("Median Price ($ in 000s)") +
coord_flip()+
ggtitle("Manhattan Real Estate Sales")+
theme(panel.background = element_blank(),
axis.line = element_line(colour = "black"))+
scale_colour_manual(values=c("darkblue","red"))
bar
ggplot(n_data, aes(x=Neighborhood,y=P.2010))
ggplot(n_data, aes(x=Neighborhood,y=P.2010)) +
geom_bar(stat="identity",color="darkblue",fill="steelblue") +
geom_point(data=n_data, aes(x=Neighborhood,y=P.2003),color="darkred",fill="darkred")
+
xlab("Neighborhood") +  ylab("Median Price ($ in 000s)") +
coord_flip()
bar<-ggplot(n_data, aes(x=Neighborhood,y=P.2010)) +
geom_bar(stat="identity",color="darkblue",fill="steelblue") +
geom_point(data=n_data, aes(x=Neighborhood,y=P.2003),color="darkred",fill="darkred")+
xlab("Neighborhood") +  ylab("Median Price ($ in 000s)") +
coord_flip()+
ggtitle("Manhattan Real Estate Sales")+
theme(panel.background = element_blank(),
axis.line = element_line(colour = "black"))
bar
shiny::runApp('D:/CUNY Files/IS 608/All Final Project Files/App Files')
nbhd_data$Neighborhood <- reorder(nbhd_data$Neighborhood, nbhd_data$Median_Price_2003)
shiny::runApp('D:/CUNY Files/IS 608/All Final Project Files/App Files')
shiny::runApp()
shiny::runApp('D:/CUNY Files/IS 608/All Final Project Files/App Files')
shiny::runApp('D:/CUNY Files/IS 608/All Final Project Files/App Files')
shiny::runApp('D:/CUNY Files/IS 608/All Final Project Files/App Files')
shiny::runApp('D:/CUNY Files/IS 608/All Final Project Files/App Files')
shiny::runApp('D:/CUNY Files/IS 608/All Final Project Files/App Files')
shiny::runApp('D:/CUNY Files/IS 608/All Final Project Files/App Files')
shiny::runApp('D:/CUNY Files/IS 608/All Final Project Files/App Files')
